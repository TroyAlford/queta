{"version":3,"sources":["webpack://queta/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://queta/./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack://queta/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack://queta/./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack://queta/./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack://queta/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://queta/./source/translate/translate.ts"],"names":["module","exports","arr","len","length","i","arr2","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","TypeError","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","arrayLikeToArray","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","glaemscribe","modes","dependencies","Promise","all","then","gs","resource_manager","load_charsets","load_modes","values","loaded_modes","resolve","language","typeface","mode","find","m","charset","supported_charsets","default_charset","translate","text","success","translation","transcribe"],"mappings":"yEAUAA,EAAOC,QAVP,SAA2BC,EAAKC,IACnB,MAAPA,GAAeA,EAAMD,EAAIE,UAAQD,EAAMD,EAAIE,QAE/C,IAAK,IAAIC,EAAI,EAAGC,EAAO,IAAIC,MAAMJ,GAAME,EAAIF,EAAKE,IAC9CC,EAAKD,GAAKH,EAAIG,GAGhB,OAAOC,I,QCHTN,EAAOC,QAJP,SAAyBC,GACvB,GAAIK,MAAMC,QAAQN,GAAM,OAAOA,I,QC0BjCF,EAAOC,QA3BP,SAA+BC,EAAKG,GAClC,GAAsB,oBAAXI,QAA4BA,OAAOC,YAAYC,OAAOT,GAAjE,CACA,IAAIU,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKhB,EAAIO,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAETjB,GAAKO,EAAKR,SAAWC,GAH8CQ,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,K,QCpBTZ,EAAOC,QAJP,WACE,MAAM,IAAIuB,UAAU,+I,aCDtB,IAAIC,EAAiB,EAAQ,KAEzBC,EAAuB,EAAQ,KAE/BC,EAA6B,EAAQ,KAErCC,EAAkB,EAAQ,KAM9B5B,EAAOC,QAJP,SAAwBC,EAAKG,GAC3B,OAAOoB,EAAevB,IAAQwB,EAAqBxB,EAAKG,IAAMsB,EAA2BzB,EAAKG,IAAMuB,M,cCTtG,IAAIC,EAAmB,EAAQ,KAW/B7B,EAAOC,QATP,SAAqC6B,EAAGC,GACtC,GAAKD,EAAL,CACA,GAAiB,iBAANA,EAAgB,OAAOD,EAAiBC,EAAGC,GACtD,IAAIC,EAAIrB,OAAOsB,UAAUC,SAASC,KAAKL,GAAGM,MAAM,GAAI,GAEpD,MADU,WAANJ,GAAkBF,EAAEO,cAAaL,EAAIF,EAAEO,YAAYC,MAC7C,QAANN,GAAqB,QAANA,EAAoBzB,MAAMgC,KAAKT,GACxC,cAANE,GAAqB,2CAA2CQ,KAAKR,GAAWH,EAAiBC,EAAGC,QAAxG,K,iHCKEU,EAAmC,KACnCC,EAA4B,GAEnBC,EAAeC,QAAQC,IAAI,CACvC,6BAGA,+BACEC,MAAK,YAAuB,IAAVC,EAAU,qBAC9BN,EAAcM,GACFC,iBAAiBC,gBAC7BR,EAAYO,iBAAiBE,aAE7BR,EAAQnC,MAAMgC,KAAK5B,OAAOwC,OAAOV,EAAYO,iBAAiBI,kBAGlDC,EAAU,SAACC,EAAkBC,GAAmC,MACtEC,EAAOd,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,OAASgB,KACxC,OAAKE,EAEE,CACNG,QAAO,UAAEH,EAAKI,mBAAmBL,UAA1B,QAAuCC,EAAKK,gBACnDL,QAJiB,CAAEG,QAAS,KAAMH,KAAM,OAQ7BM,EAAY,SACxBC,EACAT,EACAC,GACkB,MACQF,EAAQC,EAAUC,GAApCI,EADU,EACVA,QAASH,EADC,EACDA,KACjB,IAAKA,EACJ,MAAO,CAAEQ,SAAS,EAAOD,OAAME,YAAa,MAH3B,MAMeT,EAAKU,WAAWH,EAAMJ,GANrC,WAQlB,MAAO,CAAEK,QARS,KAQAD,OAAME,YARN","file":"queta-translate.min.js","sourcesContent":["function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","import type * as Glaemscribe from 'glaemscribe'\n\nexport interface ITranslator {\n\tcharset: Glaemscribe.Charset,\n\tmode: Glaemscribe.Mode,\n}\n\nexport interface ITranslation {\n\tsuccess: boolean,\n\ttext: string,\n\ttranslation: string,\n}\n\nlet glaemscribe: Glaemscribe.default = null\nlet modes: Glaemscribe.Mode[] = []\n\nexport const dependencies = Promise.all([\n\timport(\n\t\t/* webpackChunkName: 'glaemscribe' */ '../../temp/glaemscribe.js'\n\t) as Promise<{ default: Glaemscribe.default }>,\n\timport(/* webpackChunkName: 'styles' */ '../../temp/glaemscribe.scss'),\n]).then(([{ default: gs }]) => {\n\tglaemscribe = gs\n\tglaemscribe.resource_manager.load_charsets()\n\tglaemscribe.resource_manager.load_modes()\n\n\tmodes = Array.from(Object.values(glaemscribe.resource_manager.loaded_modes))\n})\n\nexport const resolve = (language: string, typeface?: string): ITranslator => {\n\tconst mode = modes.find(m => m.name === language)\n\tif (!mode) return { charset: null, mode: null }\n\n\treturn {\n\t\tcharset: mode.supported_charsets[typeface] ?? mode.default_charset,\n\t\tmode,\n\t}\n}\n\nexport const translate = (\n\ttext: string,\n\tlanguage: string,\n\ttypeface?: string,\n): ITranslation => {\n\tconst { charset, mode } = resolve(language, typeface)\n\tif (!mode) {\n\t\treturn { success: false, text, translation: null }\n\t}\n\n\tconst [success, transcription] = mode.transcribe(text, charset)\n\n\treturn { success, text, translation: transcription }\n}\n"],"sourceRoot":""}