{"version":3,"sources":["webpack://queta/./source/translate/translate.ts"],"names":["glaemscribe","modes","dependencies","Promise","all","then","gs","resource_manager","load_charsets","load_modes","Array","from","Object","values","loaded_modes","resolve","language","typeface","mode","find","m","name","charset","supported_charsets","default_charset","translate","text","success","translation","transcribe"],"mappings":"kLAaIA,EAAmC,KACnCC,EAA4B,GAEnBC,EAAeC,QAAQC,IAAI,CACvC,6BACA,+BACEC,MAAK,YAAuB,IAAVC,EAAU,qBAC9BN,EAAcM,GACFC,iBAAiBC,gBAC7BR,EAAYO,iBAAiBE,aAE7BR,EAAQS,MAAMC,KAAKC,OAAOC,OAAOb,EAAYO,iBAAiBO,kBAGlDC,EAAU,SAACC,EAAkBC,GAAmC,MACtEC,EAAOjB,EAAMkB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAASL,KACxC,OAAKE,EAEE,CACNI,QAAO,UAAEJ,EAAKK,mBAAmBN,UAA1B,QAAuCC,EAAKM,gBACnDN,QAJiB,CAAEI,QAAS,KAAMJ,KAAM,OAQ7BO,EAAY,SACxBC,EACAV,EACAC,GACkB,MACQF,EAAQC,EAAUC,GAApCK,EADU,EACVA,QAASJ,EADC,EACDA,KACjB,IAAKA,EACJ,MAAO,CAAES,SAAS,EAAOD,OAAME,YAAa,MAH3B,MAMeV,EAAKW,WAAWH,EAAMJ,GANrC,WAQlB,MAAO,CAAEK,QARS,KAQAD,OAAME,YARN","file":"queta-680.min.js","sourcesContent":["import type * as Glaemscribe from 'glaemscribe'\n\nexport interface ITranslator {\n\tcharset: Glaemscribe.Charset,\n\tmode: Glaemscribe.Mode,\n}\n\nexport interface ITranslation {\n\tsuccess: boolean,\n\ttext: string,\n\ttranslation: string,\n}\n\nlet glaemscribe: Glaemscribe.default = null\nlet modes: Glaemscribe.Mode[] = []\n\nexport const dependencies = Promise.all([\n\timport('../../temp/glaemscribe.js') as Promise<{ default: Glaemscribe.default }>,\n\timport('../../temp/glaemscribe.scss'),\n]).then(([{ default: gs }]) => {\n\tglaemscribe = gs\n\tglaemscribe.resource_manager.load_charsets()\n\tglaemscribe.resource_manager.load_modes()\n\n\tmodes = Array.from(Object.values(glaemscribe.resource_manager.loaded_modes))\n})\n\nexport const resolve = (language: string, typeface?: string): ITranslator => {\n\tconst mode = modes.find(m => m.name === language)\n\tif (!mode) return { charset: null, mode: null }\n\n\treturn {\n\t\tcharset: mode.supported_charsets[typeface] ?? mode.default_charset,\n\t\tmode,\n\t}\n}\n\nexport const translate = (\n\ttext: string,\n\tlanguage: string,\n\ttypeface?: string,\n): ITranslation => {\n\tconst { charset, mode } = resolve(language, typeface)\n\tif (!mode) {\n\t\treturn { success: false, text, translation: null }\n\t}\n\n\tconst [success, transcription] = mode.transcribe(text, charset)\n\n\treturn { success, text, translation: transcription }\n}\n"],"sourceRoot":""}