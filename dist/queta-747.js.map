{"version":3,"sources":["webpack://queta/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://queta/./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack://queta/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack://queta/./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack://queta/./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack://queta/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://queta/./source/translate/translate.ts"],"names":["glaemscribe","modes","dependencies","Promise","all","then","gs","resource_manager","load_charsets","load_modes","Array","from","Object","values","loaded_modes","resolve","language","typeface","mode","find","m","name","charset","supported_charsets","default_charset","translate","text","success","translation","transcribe","transcription"],"mappings":";;;;;AAAA;AACA;;AAEA,wCAAwC,SAAS;AACjD;AACA;;AAEA;AACA;;AAEA,mC;;;;;;;ACVA;AACA;AACA;;AAEA,iC;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,+BAA+B;AAC5E;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA,uC;;;;;;;AC3BA;AACA;AACA;;AAEA,kC;;;;;;;ACJA,qBAAqB,mBAAO,CAAC,GAAkB;;AAE/C,2BAA2B,mBAAO,CAAC,GAAwB;;AAE3D,iCAAiC,mBAAO,CAAC,GAA8B;;AAEvE,sBAAsB,mBAAO,CAAC,GAAmB;;AAEjD;AACA;AACA;;AAEA,gC;;;;;;;ACZA,uBAAuB,mBAAO,CAAC,GAAoB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6C;;;;;;;;;;;;;;;;;ACEA,IAAIA,WAAgC,GAAG,IAAvC;AACA,IAAIC,KAAyB,GAAG,EAAhC;AAEO,IAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAY,CACvC,kGADuC,EAEvC,kGAFuC,CAAZ,EAGzBC,IAHyB,CAGpB,gBAAuB;AAAA;AAAA,MAAVC,EAAU;;AAC9BN,aAAW,GAAGM,EAAd;AACAN,aAAW,CAACO,gBAAZ,CAA6BC,aAA7B;AACAR,aAAW,CAACO,gBAAZ,CAA6BE,UAA7B;AAEAR,OAAK,GAAGS,KAAK,CAACC,IAAN,CAAWC,MAAM,CAACC,MAAP,CAAcb,WAAW,CAACO,gBAAZ,CAA6BO,YAA3C,CAAX,CAAR;AACA,CAT2B,CAArB;AAWA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD,EAAmBC,QAAnB,EAAsD;AAAA;;AAC5E,MAAMC,IAAI,GAAGjB,KAAK,CAACkB,IAAN,CAAW,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,KAAWL,QAAf;AAAA,GAAZ,CAAb;AACA,MAAI,CAACE,IAAL,EAAW,OAAO;AAAEI,WAAO,EAAE,IAAX;AAAiBJ,QAAI,EAAE;AAAvB,GAAP;AAEX,SAAO;AACNI,WAAO,2BAAEJ,IAAI,CAACK,kBAAL,CAAwBN,QAAxB,CAAF,yEAAuCC,IAAI,CAACM,eAD7C;AAENN,QAAI,EAAJA;AAFM,GAAP;AAIA,CARM;AAUA,IAAMO,SAAS,GAAG,SAAZA,SAAY,CACxBC,IADwB,EAExBV,QAFwB,EAGxBC,QAHwB,EAIN;AAAA,iBACQF,OAAO,CAACC,QAAD,EAAWC,QAAX,CADf;AAAA,MACVK,OADU,YACVA,OADU;AAAA,MACDJ,IADC,YACDA,IADC;;AAElB,MAAI,CAACA,IAAL,EAAW;AACV,WAAO;AAAES,aAAO,EAAE,KAAX;AAAkBD,UAAI,EAAJA,IAAlB;AAAwBE,iBAAW,EAAE;AAArC,KAAP;AACA;;AAJiB,yBAMeV,IAAI,CAACW,UAAL,CAAgBH,IAAhB,EAAsBJ,OAAtB,CANf;AAAA;AAAA,MAMXK,OANW;AAAA,MAMFG,aANE;;AAQlB,SAAO;AAAEH,WAAO,EAAPA,OAAF;AAAWD,QAAI,EAAJA,IAAX;AAAiBE,eAAW,EAAEE;AAA9B,GAAP;AACA,CAbM,C","file":"queta-747.js","sourcesContent":["function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","import type * as Glaemscribe from 'glaemscribe'\n\nexport interface ITranslator {\n\tcharset: Glaemscribe.Charset,\n\tmode: Glaemscribe.Mode,\n}\n\nexport interface ITranslation {\n\tsuccess: boolean,\n\ttext: string,\n\ttranslation: string,\n}\n\nlet glaemscribe: Glaemscribe.default = null\nlet modes: Glaemscribe.Mode[] = []\n\nexport const dependencies = Promise.all([\n\timport('../../temp/glaemscribe.js') as Promise<{ default: Glaemscribe.default }>,\n\timport('../../temp/glaemscribe.scss'),\n]).then(([{ default: gs }]) => {\n\tglaemscribe = gs\n\tglaemscribe.resource_manager.load_charsets()\n\tglaemscribe.resource_manager.load_modes()\n\n\tmodes = Array.from(Object.values(glaemscribe.resource_manager.loaded_modes))\n})\n\nexport const resolve = (language: string, typeface?: string): ITranslator => {\n\tconst mode = modes.find(m => m.name === language)\n\tif (!mode) return { charset: null, mode: null }\n\n\treturn {\n\t\tcharset: mode.supported_charsets[typeface] ?? mode.default_charset,\n\t\tmode,\n\t}\n}\n\nexport const translate = (\n\ttext: string,\n\tlanguage: string,\n\ttypeface?: string,\n): ITranslation => {\n\tconst { charset, mode } = resolve(language, typeface)\n\tif (!mode) {\n\t\treturn { success: false, text, translation: null }\n\t}\n\n\tconst [success, transcription] = mode.transcribe(text, charset)\n\n\treturn { success, text, translation: transcription }\n}\n"],"sourceRoot":""}