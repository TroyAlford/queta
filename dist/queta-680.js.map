{"version":3,"sources":["webpack://queta/./source/translate/translate.ts"],"names":["glaemscribe","modes","dependencies","Promise","all","then","gs","resource_manager","load_charsets","load_modes","Array","from","Object","values","loaded_modes","resolve","language","typeface","mode","find","m","name","charset","supported_charsets","default_charset","translate","text","success","translation","transcribe","transcription"],"mappings":";;;;;;;;;;;;;;;AAaA,IAAIA,WAAgC,GAAG,IAAvC;AACA,IAAIC,KAAyB,GAAG,EAAhC;AAEO,IAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAY,CACvC,kGADuC,EAEvC,kGAFuC,CAAZ,EAGzBC,IAHyB,CAGpB,gBAAuB;AAAA;AAAA,MAAVC,EAAU;;AAC9BN,aAAW,GAAGM,EAAd;AACAN,aAAW,CAACO,gBAAZ,CAA6BC,aAA7B;AACAR,aAAW,CAACO,gBAAZ,CAA6BE,UAA7B;AAEAR,OAAK,GAAGS,KAAK,CAACC,IAAN,CAAWC,MAAM,CAACC,MAAP,CAAcb,WAAW,CAACO,gBAAZ,CAA6BO,YAA3C,CAAX,CAAR;AACA,CAT2B,CAArB;AAWA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD,EAAmBC,QAAnB,EAAsD;AAAA;;AAC5E,MAAMC,IAAI,GAAGjB,KAAK,CAACkB,IAAN,CAAW,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,KAAWL,QAAf;AAAA,GAAZ,CAAb;AACA,MAAI,CAACE,IAAL,EAAW,OAAO;AAAEI,WAAO,EAAE,IAAX;AAAiBJ,QAAI,EAAE;AAAvB,GAAP;AAEX,SAAO;AACNI,WAAO,2BAAEJ,IAAI,CAACK,kBAAL,CAAwBN,QAAxB,CAAF,yEAAuCC,IAAI,CAACM,eAD7C;AAENN,QAAI,EAAJA;AAFM,GAAP;AAIA,CARM;AAUA,IAAMO,SAAS,GAAG,SAAZA,SAAY,CACxBC,IADwB,EAExBV,QAFwB,EAGxBC,QAHwB,EAIN;AAAA,iBACQF,OAAO,CAACC,QAAD,EAAWC,QAAX,CADf;AAAA,MACVK,OADU,YACVA,OADU;AAAA,MACDJ,IADC,YACDA,IADC;;AAElB,MAAI,CAACA,IAAL,EAAW;AACV,WAAO;AAAES,aAAO,EAAE,KAAX;AAAkBD,UAAI,EAAJA,IAAlB;AAAwBE,iBAAW,EAAE;AAArC,KAAP;AACA;;AAJiB,yBAMeV,IAAI,CAACW,UAAL,CAAgBH,IAAhB,EAAsBJ,OAAtB,CANf;AAAA;AAAA,MAMXK,OANW;AAAA,MAMFG,aANE;;AAQlB,SAAO;AAAEH,WAAO,EAAPA,OAAF;AAAWD,QAAI,EAAJA,IAAX;AAAiBE,eAAW,EAAEE;AAA9B,GAAP;AACA,CAbM,C","file":"queta-680.js","sourcesContent":["import type * as Glaemscribe from 'glaemscribe'\n\nexport interface ITranslator {\n\tcharset: Glaemscribe.Charset,\n\tmode: Glaemscribe.Mode,\n}\n\nexport interface ITranslation {\n\tsuccess: boolean,\n\ttext: string,\n\ttranslation: string,\n}\n\nlet glaemscribe: Glaemscribe.default = null\nlet modes: Glaemscribe.Mode[] = []\n\nexport const dependencies = Promise.all([\n\timport('../../temp/glaemscribe.js') as Promise<{ default: Glaemscribe.default }>,\n\timport('../../temp/glaemscribe.scss'),\n]).then(([{ default: gs }]) => {\n\tglaemscribe = gs\n\tglaemscribe.resource_manager.load_charsets()\n\tglaemscribe.resource_manager.load_modes()\n\n\tmodes = Array.from(Object.values(glaemscribe.resource_manager.loaded_modes))\n})\n\nexport const resolve = (language: string, typeface?: string): ITranslator => {\n\tconst mode = modes.find(m => m.name === language)\n\tif (!mode) return { charset: null, mode: null }\n\n\treturn {\n\t\tcharset: mode.supported_charsets[typeface] ?? mode.default_charset,\n\t\tmode,\n\t}\n}\n\nexport const translate = (\n\ttext: string,\n\tlanguage: string,\n\ttypeface?: string,\n): ITranslation => {\n\tconst { charset, mode } = resolve(language, typeface)\n\tif (!mode) {\n\t\treturn { success: false, text, translation: null }\n\t}\n\n\tconst [success, transcription] = mode.transcribe(text, charset)\n\n\treturn { success, text, translation: transcription }\n}\n"],"sourceRoot":""}